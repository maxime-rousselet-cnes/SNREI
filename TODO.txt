Historic:
    tested elastic only. OK
    with 2*pi error and 0.04 bias, results ok for A, B and C!

    verify curbs and k_2 with new pulsation/frequency differenciation -> OK
    check integration __init__ -> OK
    plot fr and fi -> OK
    plot mu(r) -> OK
    comparative plots for h, k, k'... -> OK
    comparative_for sampling with realistic omega band and script 06 that calls script function 02 and plot 07 with better inputs for fewer figures -> OK

    redo script_09 such as the compared models are: -> OK
        elastic/anelastic/attenuated/anelastic & attenuated/anelastic with Asthenosphere/attenuated with bounded functions/anelastic & attenuated with bounded functions
        <=> everything but pass attenuation when Asthenosphere/pass bounded when not attenuation/pass Asthenosphere when not anelastic
    rewrite integration such as if there is a non null high_frequency_elastic_ratio variable_value, tau_M variable_value is overwritten. Needs:
        write find_tau_M (high_frequency_elastic_ratio) -> OK

Urgent:
    Re-launch /bin/python3 computation_script_03_Love_number_for_sampling.py --initial_real_description_id base-model --load_initial_description
    chose a single asymptotic_ratio value and set it in Benjamin's model
    launch /bin/python3 computation_script_02_Love_number_for_descriptions.py --initial_real_description_id base-model --load_initial_description
    Fourier Ocean
    Look at Alex's article (CNES mail)
    README.md infography for code documentation. redo with high_frequency_elastic_ratio
    select plots
    LaTeX disponible figures
    plots_Love_numbers


Soon:
    Ocean mask + Caron load from raw files (Barystatic) to ocean_load: result[n, m, T] script
    FT periodic to ocean_load_Fourier: result[n, m, frequency]
    get deformation_Fourier : result[n, m, frequency]
    get deformation: result[theta, phi, T]
    save

later:
    forgot the 3 in Lamba_0 expression in LaTeX
    Vectorize and implement minimal computing policy for:
        integration.py: y_system_integration method and subfunctions
        surface_solutiuons.py
        system_definitions.py

To talk about 14/02:
    - discuss on the needed bounded f_r and f_i (depends on T)